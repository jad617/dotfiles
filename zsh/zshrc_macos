##################################
# Global ZSH Settings
##################################
# --- Zsh completion with preselected menu on Tab Tab ---
autoload -U compinit
compinit

# --- History substring search like Oh My Zsh ---
autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey '^[[A' up-line-or-beginning-search     # Up arrow
bindkey '^[[B' down-line-or-beginning-search   # Down arrow

# Needed for interactive selection UI
zmodload zsh/complist

# Behaviors:
setopt AUTO_LIST          # list choices on ambiguous completion
setopt AUTO_MENU          # start menu completion on the 2nd Tab press
unsetopt MENU_COMPLETE    # keep normal completion on first Tab

# Make the menu open with a highlighted (preselected) item
zstyle ':completion:*' menu select=1

# Nice-to-haves for cd
setopt AUTO_PARAM_SLASH                     # add trailing / when completing dirs
zstyle ':completion:*:cd:*' tag-order 'local-directories directory-stack path-directories'
zstyle ':completion:*:cd:*' ignore-parents parent pwd  # don't suggest . and ..
zstyle ':completion:*' squeeze-slashes true

# Optional: colors in the completion menu (uses your LS_COLORS if set)
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Custom cd function to handle multiple dots
cd() {
  # Detect only dots (.., ..., ....)
  if [[ $# -eq 1 && $1 == +([.]) ]]; then
    local n=${#1}
    local path=".."
    for ((i=2; i<=n; i++)); do path+="/.."; done
    builtin cd "$path"
  else
    builtin cd "$@"
  fi
}

# Completion function: allow `cd ..<TAB>` to list parent folder
_cd_parent() {
  # If the current word is '..', expand to '../' to list parent contents
  if [[ $words[-1] == '..' ]]; then
    compadd -- $(command ls -d ../*/ 2>/dev/null)
  else
    _cd
  fi
}
compdef _cd_parent cd

# Enable select word style
autoload -U select-word-style
select-word-style bash

# Prevent confirmation on rm
setopt rm_star_silent

# Bindkey Settings
bindkey -e
bindkey '\e\e[C' forward-word
bindkey '\e\e[D' backward-word
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5C" forward-word
# --- Make Home/End keys move to start/end of line ---
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line

# Some terminals (like Kitty, WezTerm, GNOME) use slightly different codes:
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line

# ZSH HISTORY Settings
setopt share_history
HISTSIZE=200000
SAVEHIST=200000

################################
# Custom configurations
################################

#Custom
[ -f ~/.my_aliases.sh ] && source ~/.my_aliases.sh
[ -f ~/.my_aliases_non_git.sh ] && source ~/.my_aliases_non_git.sh

#FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Kubectl autocomplete
if [[ -f ~/.config/completion/kubectl.sh ]]
then
 source ~/.config/completion/kubectl.sh
else
  kubectl completion zsh > ~/.config/completion/kubectl.sh
 source ~/.config/completion/kubectl.sh
fi

source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"
eval "$(pyenv virtualenv-init -)"

##################################
# Oh My Posh
##################################
# Load Oh My Posh configuration
# Has to be at the end of the file
eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/zsh.toml)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/craver.json)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/emodipt-extend.omp.json)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/markbull.omp.json)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/marcduiker.omp.json)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/material.omp.json)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/space.omp.json)"
# eval "$(oh-my-posh init zsh --config $HOME/.config/ohmyposh/spaceship.omp.json)"
